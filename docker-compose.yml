version: '2.2'

services:
  zoo:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo
    container_name: zoo
    ports:
      - "2181:2181"
    environment:
     ZOOKEEPER_CLIENT_PORT: 2181
     ZOOKEEPER_SERVER_ID: 1
     ZOOKEEPER_SERVERS: zoo:2888:3888
 #   volumes:
  #    - zookeeper-data:/var/lib/zookeeper/data

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
    #volumes:
     # - kafka-data:/var/lib/kafka/data
    depends_on:
      - zoo
#volumes:
  #zookeeper-data: {}  # by doing this , the docker will create volumes if they dont exist
 # kafka-data: {} 
  postgres:
    image: postgres:14-alpine
    environment:
      POSTGRES_PASSWORD: ithunjanthanne 
      POSTGRES_USER: postgres  
      POSTGRES_DB1: auth_service
      POSTGRES_DB2: company_service
      POSTGRES_DB3: payment_service
      POSTGRES_DB4: project_service
      POSTGRES_DB5: user_service
   # ports:
      #- "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
  
  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db

  redis:
    image: redis:latest
   # ports:
     # - "6379:6379" 

  minio:
    image: quay.io/minio/minio:latest
    environment:
      MINIO_ACCESS_KEY: GItoa8XNcjw6v32ILKgD
      MINIO_SECRET_KEY: YBidY5yQvk6EeFo47abqiiDqGR0WMtjsg0yEWPxj  
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data 

  api-gateway:
    image: akshayhere999/project-and-company-management-api-gateway:v0.1.0
    ports:
      - '50000:50000'
    depends_on:
      - kafka
      - postgres
      - mongodb
      - redis
      - minio

  auth-service:
    image: akshayhere999/project-and-company-management-auth-service:v0.1.0
    ports:
      - '50004:50004'
    depends_on:
      - kafka
      - postgres
      - mongodb
      - redis
      - minio

  chat-service:
    image: akshayhere999/project-and-company-management-chat-service:v0.1.0
    ports:
      - '50006:50006'
    depends_on:
      - kafka
      - postgres
      - mongodb
      - redis
      - minio

  company-service:
    image: akshayhere999/project-and-company-management-company-service:v0.1.0
    ports:
      - '50003:50003'
    depends_on:
      - kafka
      - postgres
      - mongodb
      - redis
      - minio

  email-service:
    image: akshayhere999/project-and-company-management-email-service:v0.1.1
    depends_on:
      - kafka
      - postgres
      - mongodb
      - redis
      - minio

  payment-service:
    image: akshayhere999/project-and-company-management-payment-service:v0.1.0
    ports:
      - '50007:50007'
    depends_on:
      - kafka
      - postgres
      - mongodb
      - redis
      - minio

  project-service:
    image: akshayhere999/project-and-company-management-project-service:v0.1.0
    ports:
      - '50002:50002'
    depends_on:
      - kafka
      - postgres
      - mongodb
      - redis
      - minio

  snapshot-service:
    image: akshayhere999/project-and-company-management-snapshot-service:v0.1.0
    ports:
      - '50005:50005'
    depends_on:
      - kafka
      - postgres
      - mongodb
      - redis
      - minio

  user-service:
    image: akshayhere999/project-and-company-management-user-service:v0.1.0
    ports:
      - '50001:50001'
    depends_on:
      - kafka
      - postgres
      - mongodb
      - redis
      - minio

volumes:

  minio-data: {}
  mongo-data: {}
  postgres-data: {}
