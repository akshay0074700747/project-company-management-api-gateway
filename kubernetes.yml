apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
type: Opaque
data:
  POSTGRES_USER: cG9zdGdyZXM=
  POSTGRES_PASSWORD: aXRodW5qYW50aGFubmU=

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: initdb-config
data:
  initdb.sql: |
    CREATE DATABASE auth_service;
    CREATE DATABASE company_service;
    CREATE DATABASE payment_service;
    CREATE DATABASE project_service;
    CREATE DATABASE user_service;

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-database
spec:
  selector:
    matchLabels:
      app: postgres
  serviceName: postgres-service
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres-database
        image: postgres:14-alpine
        envFrom:
        - secretRef:
            name: postgres-secret
        ports:
        - containerPort: 5432
          name: db
        volumeMounts:
        - name: initdb-script
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: initdb-script
        configMap:
          name: initdb-config
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
          requests:
            storage: 50Mi

---

apiVersion: v1
kind: Service
metadata:
  name: postgres-service
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo-database
spec:
  selector:
    matchLabels:
      app: mongo
  serviceName: mongo-service
  replicas: 1
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
      - name: mongo-database
        image: mongo:latest
        ports:
        - containerPort: 27017
          name: db
        volumeMounts:
        - name: mongo-data
          mountPath: /data/db
      volumes:  
        - name: mongo-data
          persistentVolumeClaim:
            claimName: mongo-data  
  volumeClaimTemplates:  
    - metadata:
        name: mongo-data  
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 50Mi

---

apiVersion: v1
kind: Service
metadata:
  name: mongo-service
spec:
  selector:
    app: mongo
  ports:
  - port: 27017
    targetPort: 27017

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cache
spec:
  selector:
    matchLabels:
      app: redis
  serviceName: redis-service
  replicas: 1
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis-cache
        image: redis:latest
        ports:
        - containerPort: 6379
          name: db
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 50Mi

---

apiVersion: v1
kind: Service
metadata:
  name: redis-service
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379

---

apiVersion: v1
kind: Secret
metadata:
  name: minio-secret
type: Opaque
data:
  MINIO_ACCESS_KEY: R0l0b2E4WE5janc2djMySUxLZ0Q=
  MINIO_SECRET_KEY: WUJpZFk1eVF2azZFZUZvNDdhYnFpaURxR1IwV010anNnMHlFV1B4ag==

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: minio-database
spec:
  selector:
    matchLabels:
      app: minio-database
  serviceName: minio-service
  replicas: 1
  template:
    metadata:
      labels:
        app: minio-database
    spec:
      containers:
      - name: minio-database
        image: quay.io/minio/minio:latest
        command: ["/bin/bash", "-c",
          "set -e;

          buckets=(snapshots-storage-bucket resume-storage-bucket tasks-storage-bucket);

          for bucket in '${buckets[@]}'; do
            if ! mc bucket exists $bucket; then
               mc mb $bucket;
            fi
          done

          echo 'Buckets created successfully!'

          minio server /data"]
      # command: ["/bin/bash", "-c",
      #   "set -e; # Exit on errors

      #   # Download MinIO Client binary
      #   curl -sL https://dl.min.io/client/mc/release/linux-amd64/mc -o /tmp/mc && chmod +x /tmp/mc

      #   # Update path to downloaded mc binary
      #   mc='/tmp/mc'

      #   buckets=(snapshots-storage-bucket resume-storage-bucket tasks-storage-bucket);

      #   for bucket in '${buckets[@]}'; do
      #   if ! $mc mc bucket exists $bucket; then
      #   $mc mc mb $bucket;
      #   fi
      #   done

      #   echo 'Buckets created successfully!'

      #   minio server /data"]
        envFrom:
        - secretRef:
            name: minio-secret
        ports:
        - containerPort: 9000
          name: dbone
        - containerPort: 9001
          name: dbtwo
        volumeMounts:
        - name: minio-data
          mountPath: /data
      volumes:
      - name: minio-data
        persistentVolumeClaim:
          claimName: minio-data
  volumeClaimTemplates:
  - metadata:
      name: minio-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
          requests:
            storage: 50Mi

---

apiVersion: v1
kind: Service
metadata:
  name: minio-service
spec:
  selector:
    app: minio-service
  ports:
  - name: minio-port-1
    port: 9000
    targetPort: 9000
  - name: minio-port-2
    port: 9001
    targetPort: 9001

---

apiVersion: v1
kind: Service
metadata:
  name: zookeeper
spec:
  selector:
    app: zookeeper
  ports:
    - protocol: TCP
      port: 2181
      targetPort: 2181

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
      - name: zookeeper
        image: confluentinc/cp-zookeeper:7.3.2
        ports:
        - containerPort: 2181
        env:
          - name: ZOOKEEPER_CLIENT_PORT
            value: "2181"
          - name: ZOOKEEPER_SERVER_ID
            value: "1"
          - name: ZOOKEEPER_SERVERS
            value: zookeeper:2888:3888

---

apiVersion: v1
kind: Service
metadata:
  name: apache-kafka-service
spec:
  selector:
    app: kafka
  ports:
    - name: kafka-port-1
      protocol: TCP
      port: 9092
      targetPort: 9092
    - name: kafka-port-2
      protocol: TCP
      port: 29092
      targetPort: 29092
    - name: kafka-port-3
      protocol: TCP
      port: 9999
      targetPort: 9999

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      initContainers:
        - name: wait-for-dependencies
          image: busybox
          command: ['sh', '-c', 'until nc -z zookeeper 2181; do echo waiting for dependencies; sleep 2; done;']
      containers:
        - name: kafka
          image: confluentinc/cp-kafka:7.3.2
          ports:
            - containerPort: 9092
            - containerPort: 29092
            - containerPort: 9999
          env:
            - name: KAFKA_ADVERTISED_LISTENERS
              value: EXTERNAL://apache-kafka-service:9092,DOCKER://host.docker.internal:29092
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: EXTERNAL
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zookeeper:2181"
            - name: KAFKA_BROKER_ID
              value: "1"
            - name: KAFKA_LOG4J_LOGGERS
              value: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
              value: "1"
            - name: KAFKA_JMX_PORT
              value: "9999"
            - name: KAFKA_JMX_HOSTNAME
              value: "${DOCKER_HOST_IP:-127.0.0.1}"
            - name: KAFKA_AUTHORIZER_CLASS_NAME
              value: kafka.security.authorizer.AclAuthorizer
            - name: KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND
              value: "true"
            - name: KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE
              value: "true"

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
spec:
  selector:
    matchLabels:
      app: api-gateway
  replicas: 1
  template:
    metadata:
      labels:
        app: api-gateway
    spec:
      initContainers:
      - name: wait-for-dependencies
        image: busybox
        # command: ['sh', '-c', 'until (nc -z apache-kafka-service 9092 && nc -z minio-service 9000 && nc -z redis-service 6379 && nc -z mongo-service 27017 && nc -z postgres-service 5432); do echo "Waiting for dependencies..."; sleep 2; done; echo "All dependencies are ready!"']
        command: ['sh', '-c', 'echo "Waiting for all the services to get started..."; sleep 30; echo "Starting now..."']
      containers:
      - name: api-gateway
        image: akshayhere999/project-and-company-management-api-gateway:v0.2.1
        # command: ['sh', '-c', 'echo "Waiting for all the services to get started..."; sleep 20; echo "Starting now..."']
        resources:
          limits:
            memory: "50Mi"
            cpu: "50m"
        ports:
        - containerPort: 50000
---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
spec:
  selector:
    app: api-gateway
  ports:
  - port: 50000
    targetPort: 50000
    nodePort: 30000
  type: LoadBalancer
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
spec:
  selector:
    matchLabels:
      app: auth-service
  replicas: 1
  template:
    metadata:
      labels:
        app: auth-service
    spec:
      initContainers:
      - name: wait-for-dependencies
        image: busybox
        # command: ['sh', '-c', 'until (nc -z apache-kafka-service 9092 && nc -z minio-service 9000 && nc -z redis-service 6379 && nc -z mongo-service 27017 && nc -z postgres-service 5432); do echo "Waiting for dependencies..."; sleep 2; done; echo "All dependencies are ready!"']
        command: ['sh', '-c', 'echo "Waiting for all the services to get started..."; sleep 30; echo "Starting now..."']
      containers:
      - name: auth-service
        image: akshayhere999/project-and-company-management-auth-service:v0.1.4
        # command: ['sh', '-c', 'echo "Waiting for all the services to get started..."; sleep 20; echo "Starting now..."']
        resources:
          limits:
            memory: "50Mi"
            cpu: "50m"
        ports:
        - containerPort: 50004
---
apiVersion: v1
kind: Service
metadata:
  name: auth-service
spec:
  selector:
    app: auth-service
  type: ClusterIP
  ports:
  - port: 50004
    targetPort: 50004
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chat-service
spec:
  selector:
    matchLabels:
      app: chat-service
  replicas: 1
  template:
    metadata:
      labels:
        app: chat-service
    spec:
      initContainers:
      - name: wait-for-dependencies
        image: busybox
        # command: ['sh', '-c', 'until (nc -z apache-kafka-service 9092 && nc -z minio-service 9000 && nc -z redis-service 6379 && nc -z mongo-service 27017 && nc -z postgres-service 5432); do echo "Waiting for dependencies..."; sleep 2; done; echo "All dependencies are ready!"']
        command: ['sh', '-c', 'echo "Waiting for all the services to get started..."; sleep 30; echo "Starting now..."']
      containers:
      - name: chat-service
        image: akshayhere999/project-and-company-management-chat-service:v0.1.2
        # command: ['sh', '-c', 'echo "Waiting for all the services to get started..."; sleep 20; echo "Starting now..."']
        resources:
          limits:
            memory: "50Mi"
            cpu: "50m"
        ports:
        - containerPort: 50006
---
apiVersion: v1
kind: Service
metadata:
  name: chat-service
spec:
  selector:
    app: chat-service
  type: ClusterIP
  ports:
  - port: 50006
    targetPort: 50006
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: company-service
spec:
  selector:
    matchLabels:
      app: company-service
  replicas: 1
  template:
    metadata:
      labels:
        app: company-service
    spec:
      initContainers:
      - name: wait-for-dependencies
        image: busybox
        # command: ['sh', '-c', 'until (nc -z apache-kafka-service 9092 && nc -z minio-service 9000 && nc -z redis-service 6379 && nc -z mongo-service 27017 && nc -z postgres-service 5432); do echo "Waiting for dependencies..."; sleep 2; done; echo "All dependencies are ready!"']
        command: ['sh', '-c', 'echo "Waiting for all the services to get started..."; sleep 30; echo "Starting now..."']
      containers:
      - name: company-service
        image: akshayhere999/project-and-company-management-company-service:v0.1.5
        # command: ['sh', '-c', 'echo "Waiting for all the services to get started..."; sleep 20; echo "Starting now..."']
        resources:
          limits:
            memory: "50Mi"
            cpu: "50m"
        ports:
        - containerPort: 50003
---
apiVersion: v1
kind: Service
metadata:
  name: company-service
spec:
  selector:
    app: company-service
  type: ClusterIP
  ports:
  - port: 50003
    targetPort: 50003
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: email-service
spec:
  selector:
    matchLabels:
      app: email-service
  replicas: 1
  template:
    metadata:
      labels:
        app: email-service
    spec:
      initContainers:
      - name: wait-for-dependencies
        image: busybox
        # command: ['sh', '-c', 'until (nc -z apache-kafka-service 9092 && nc -z minio-service 9000 && nc -z redis-service 6379 && nc -z mongo-service 27017 && nc -z postgres-service 5432); do echo "Waiting for dependencies..."; sleep 2; done; echo "All dependencies are ready!"']
        command: ['sh', '-c', 'echo "Waiting for all the services to get started..."; sleep 30; echo "Starting now..."']
      containers:
      - name: email-service
        image: akshayhere999/project-and-company-management-email-service:v0.2.4
        # command: ['sh', '-c', 'echo "Waiting for all the services to get started..."; sleep 20; echo "Starting now..."']
        resources:
          limits:
            memory: "50Mi"
            cpu: "50m"
        ports:
        - containerPort: 50008
---
apiVersion: v1
kind: Service
metadata:
  name: email-service
spec:
  selector:
    app: email-service
  type: ClusterIP
  ports:
  - port: 50008
    targetPort: 50008
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment-service
spec:
  selector:
    matchLabels:
      app: payment-service
  replicas: 1
  template:
    metadata:
      labels:
        app: payment-service
    spec:
      initContainers:
      - name: wait-for-dependencies
        image: busybox
        # command: ['sh', '-c', 'until (nc -z apache-kafka-service 9092 && nc -z minio-service 9000 && nc -z redis-service 6379 && nc -z mongo-service 27017 && nc -z postgres-service 5432); do echo "Waiting for dependencies..."; sleep 2; done; echo "All dependencies are ready!"']
        command: ['sh', '-c', 'echo "Waiting for all the services to get started..."; sleep 30; echo "Starting now..."']
      containers:
      - name: payment-service
        image: akshayhere999/project-and-company-management-payment-service:v0.2.2
        # command: ['sh', '-c', 'echo "Waiting for all the services to get started..."; sleep 20; echo "Starting now..."']
        resources:
          limits:
            memory: "50Mi"
            cpu: "50m"
        ports:
        - containerPort: 50007
---
apiVersion: v1
kind: Service
metadata:
  name: payment-service
spec:
  selector:
    app: payment-service
  type: ClusterIP
  ports:
  - port: 50007
    targetPort: 50007

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: project-service
spec:
  selector:
    matchLabels:
      app: project-service
  replicas: 1
  template:
    metadata:
      labels:
        app: project-service
    spec:
      initContainers:
      - name: wait-for-dependencies
        image: busybox
        # command: ['sh', '-c', 'until (nc -z apache-kafka-service 9092 && nc -z minio-service 9000 && nc -z redis-service 6379 && nc -z mongo-service 27017 && nc -z postgres-service 5432); do echo "Waiting for dependencies..."; sleep 2; done; echo "All dependencies are ready!"']
        command: ['sh', '-c', 'echo "Waiting for all the services to get started..."; sleep 30; echo "Starting now..."']
      containers:
      - name: project-service
        image: akshayhere999/project-and-company-management-project-service:v0.1.5
        # command: ['sh', '-c', 'echo "Waiting for all the services to get started..."; sleep 20; echo "Starting now..."']
        resources:
          limits:
            memory: "50Mi"
            cpu: "50m"
        ports:
        - containerPort: 50002
---
apiVersion: v1
kind: Service
metadata:
  name: project-service
spec:
  selector:
    app: project-service
  type: ClusterIP
  ports:
  - port: 50002
    targetPort: 50002
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: snapshot-service
spec:
  selector:
    matchLabels:
      app: snapshot-service
  replicas: 1
  template:
    metadata:
      labels:
        app: snapshot-service
    spec:
      initContainers:
      - name: wait-for-dependencies
        image: busybox
        # command: ['sh', '-c', 'until (nc -z apache-kafka-service 9092 && nc -z minio-service 9000 && nc -z redis-service 6379 && nc -z mongo-service 27017 && nc -z postgres-service 5432); do echo "Waiting for dependencies..."; sleep 2; done; echo "All dependencies are ready!"']
        command: ['sh', '-c', 'echo "Waiting for all the services to get started..."; sleep 30; echo "Starting now..."']
      containers:
      - name: snapshot-service
        image: akshayhere999/project-and-company-management-snapshot-service:v0.2.3
        # command: ['sh', '-c', 'echo "Waiting for all the services to get started..."; sleep 20; echo "Starting now..."']
        resources:
          limits:
            memory: "50Mi"
            cpu: "50m"
        ports:
        - containerPort: 50005
---
apiVersion: v1
kind: Service
metadata:
  name: snapshot-service
spec:
  selector:
    app: snapshot-service
  type: ClusterIP
  ports:
  - port: 50005
    targetPort: 50005
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
spec:
  selector:
    matchLabels:
      app: user-service
  replicas: 1
  template:
    metadata:
      labels:
        app: user-service
    spec:
      initContainers:
      - name: wait-for-dependencies
        image: busybox
        # command: ['sh', '-c', 'until (nc -z apache-kafka-service 9092 && nc -z minio-service 9000 && nc -z redis-service 6379 && nc -z mongo-service 27017 && nc -z postgres-service 5432); do echo "Waiting for dependencies..."; sleep 2; done; echo "All dependencies are ready!"']
        command: ['sh', '-c', 'echo "Waiting for all the services to get started..."; sleep 30; echo "Starting now..."']
      containers:
      - name: user-service
        image: akshayhere999/project-and-company-management-user-service:v0.1.2
        # command: ['sh', '-c', 'echo "Waiting for all the services to get started..."; sleep 20; echo "Starting now..."']
        resources:
          limits:
            memory: "50Mi"
            cpu: "50m"
        ports:
        - containerPort: 50001
---
apiVersion: v1
kind: Service
metadata:
  name: user-service
spec:
  selector:
    app: user-service
  type: ClusterIP
  ports:
  - port: 50001
    targetPort: 50001
