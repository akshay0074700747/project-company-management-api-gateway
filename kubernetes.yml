apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
type: Opaque
data:
  POSTGRES_USER: cG9zdGdyZXMg
  POSTGRES_PASSWORD: aXRobnVuamFudGFuZQ==

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: initdb-config
data:
  initdb.sql: |
    CREATE DATABASE auth_service;
    CREATE DATABASE company_service;
    CREATE DATABASE payment_service;
    CREATE DATABASE project_service;
    CREATE DATABASE user_service;

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-database
spec:
  selector:
    matchLabels:
      app: postgres
  serviceName: postgres-service
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres-database
        image: postgres:14-alpine
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        envFrom:
        - secretRef:
            name: postgres-secret
        ports:
        - containerPort: 5432
          name: db
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: initdb-script
          mountPath: /docker-entrypoint-initdb.d
      volumes:  
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-data  
        - name: initdb-script
          configMap:
            name: initdb-config
  volumeClaimTemplates:  
    - metadata:
        name: postgres-data  
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 200Mi

---

apiVersion: v1
kind: Service
metadata:
  name: postgres-service
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo-database
spec:
  selector:
    matchLabels:
      app: mongo
  serviceName: mongo-service
  replicas: 1
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
      - name: mongo-database
        image: mongo:latest
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 27017
          name: db
        volumeMounts:
        - name: mongo-data
          mountPath: /data/db
      volumes:  
        - name: mongo-data
          persistentVolumeClaim:
            claimName: mongo-data  
  volumeClaimTemplates:  
    - metadata:
        name: mongo-data  
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 200Mi

---

apiVersion: v1
kind: Service
metadata:
  name: mongo-service
spec:
  selector:
    app: mongo
  ports:
  - port: 27017
    targetPort: 27017

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cache
spec:
  selector:
    matchLabels:
      app: redis
  serviceName: redis-service
  replicas: 1
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis-cache
        image: redis:latest
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 6379
          name: db
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 200Mi

---

apiVersion: v1
kind: Service
metadata:
  name: redis-service
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379

---

apiVersion: v1
kind: Secret
metadata:
  name: minio-secret
type: Opaque
data:
  MINIO_ACCESS_KEY: R0l0b2E4WE5jajc2aUxLZ0c=
  MINIO_SECRET_KEY: WUJpZFk1eVF2azZFZUZvNDdhYnFpaURxR1IwV01qc2cweUVXUHhq

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: minio-database
spec:
  selector:
    matchLabels:
      app: minio
  serviceName: minio-service
  replicas: 1
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
      - name: minio-database
        image: quay.io/minio/minio:latest
        entrypoint: [ "/bin/bash", "-c",
          "set -e;  # Exit on errors

          buckets=(snapshots-storage-bucket resume-storage-bucket tasks-storage-bucket);

          minio='/usr/local/bin/minio';

          for bucket in '${buckets[@]}'; do
            if ! $minio mc bucket exists $bucket; then
              $minio mc mb $bucket;
            fi
          done

          echo 'Buckets created successfully!'

          minio server /data" ]
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        envFrom:
        - secretRef:
            name: minio-secret
        ports:
        - containerPort: 9000
          name: dbone
        - containerPort: 9001
          name: dbtwo
        volumeMounts:
        - name: minio-data
          mountPath: /data 
      volumes:  
        - name: minio-data
          persistentVolumeClaim:
            claimName: minio-data
  volumeClaimTemplates:  
    - metadata:
        name: minio-data  
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 200Mi

---

apiVersion: v1
kind: Service
metadata:
  name: minio-service
spec:
  selector:
    app: minio
  ports:
  - port: 9000
    targetPort: 9000
  - port: 9001
    targetPort: 9001

---

apiVersion: v1
kind: Service
metadata:
  name: zookeeper
spec:
  selector:
    app: zookeeper
  ports:
    - protocol: TCP
      port: 2181
      targetPort: 2181

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
      - name: zookeeper
        image: confluentinc/cp-zookeeper:7.3.2
        ports:
        - containerPort: 2181
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        env:
          - name: ZOOKEEPER_CLIENT_PORT
            value: "2181"
          - name: ZOOKEEPER_SERVER_ID
            value: "1"
          - name: ZOOKEEPER_SERVERS
            value: zookeeper:2888:3888

---

apiVersion: v1
kind: Service
metadata:
  name: kafka
spec:
  selector:
    app: kafka
  ports:
    - protocol: TCP
      port: 9092
      targetPort: 9092
    - protocol: TCP
      port: 29092
      targetPort: 29092
    - protocol: TCP
      port: 9999
      targetPort: 9999

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
      - name: kafka
        image: confluentinc/cp-kafka:7.3.2
        ports:
        - containerPort: 9092
        - containerPort: 29092
        - containerPort: 9999
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        env:
          - name: KAFKA_ADVERTISED_LISTENERS
            value: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
          - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
            value: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
          - name: KAFKA_INTER_BROKER_LISTENER_NAME
            value: INTERNAL
          - name: KAFKA_ZOOKEEPER_CONNECT
            value: "zoo:2181"
          - name: KAFKA_BROKER_ID
            value: "1"
          - name: KAFKA_LOG4J_LOGGERS
            value: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
          - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
            value: "1"
          - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
            value: "1"
          - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
            value: "1"
          - name: KAFKA_JMX_PORT
            value: "9999"
          - name: KAFKA_JMX_HOSTNAME
            value: "${DOCKER_HOST_IP:-127.0.0.1}"
          - name: KAFKA_AUTHORIZER_CLASS_NAME
            value: kafka.security.authorizer.AclAuthorizer
          - name: KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND
            value: "true"
          - name: KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE
            value: "true"
      depends_on:
        - zookeeper

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
spec:
  selector:
    matchLabels:
      app: user-service
  replicas: 1
  template:
    metadata:
      labels:
        app: user-service
    spec:
      containers:
      - name: user-service
        image: akshayhere999/user-service:1.1
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 50002
---
apiVersion: v1
kind: Service
metadata:
  name: user-service
spec:
  selector:
    app: user-service
  type: ClusterIP
  ports:
  - port: 50002
    targetPort: 50002
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-service
spec:
  selector:
    matchLabels:
      app: product-service
  replicas: 1
  template:
    metadata:
      labels:
        app: product-service
    spec:
      containers:
      - name: product-service
        image: akshayhere999/product-service:1.1
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 50004
---
apiVersion: v1
kind: Service
metadata:
  name: product-service
spec:
  selector:
    app: product-service
  type: ClusterIP
  ports:
  - port: 50004
    targetPort: 50004
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wishlist-service
spec:
  selector:
    matchLabels:
      app: wishlist-service
  replicas: 1
  template:
    metadata:
      labels:
        app: wishlist-service
    spec:
      containers:
      - name: wishlist-service
        image: akshayhere999/wishlist-service:1.2
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 50007
---
apiVersion: v1
kind: Service
metadata:
  name: wishlist-service
spec:
  selector:
    app: wishlist-service
  type: ClusterIP
  ports:
  - port: 50007
    targetPort: 50007
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
spec:
  selector:
    matchLabels:
      app: order-service
  replicas: 1
  template:
    metadata:
      labels:
        app: order-service
    spec:
      containers:
      - name: order-service
        image: akshayhere999/order-service:1.2
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 50003
---
apiVersion: v1
kind: Service
metadata:
  name: order-service
spec:
  selector:
    app: order-service
  type: ClusterIP
  ports:
  - port: 50003
    targetPort: 50003
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cart-service
spec:
  selector:
    matchLabels:
      app: cart-service
  replicas: 1
  template:
    metadata:
      labels:
        app: cart-service
    spec:
      containers:
      - name: cart-service
        image: akshayhere999/cart-service:1.2
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 50006
---
apiVersion: v1
kind: Service
metadata:
  name: cart-service
spec:
  selector:
    app: cart-service
  type: ClusterIP
  ports:
  - port: 50006
    targetPort: 50006
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: client-connect
spec:
  selector:
    matchLabels:
      app: client-connect
  replicas: 1
  template:
    metadata:
      labels:
        app: client-connect
    spec:
      containers:
      - name: client-connect
        image: akshayhere999/client-connect:1.2
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 50001
---
apiVersion: v1
kind: Service
metadata:
  name: client-connect
spec:
  selector:
    app: client-connect
  ports:
  - port: 50001
    targetPort: 50001
    nodePort: 30001
  type: NodePort
---